{"version":3,"sources":["fee-redeemer.ts","Header.tsx","RedeemButton.tsx","Redeemer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["RENT_PER_TOKEN_ACCOUNT_IN_SOL","getTotalRedemptions","connection","account","a","getAccountInfo","buffer","data","console","log","toBase58","closedAccounts","readInt32LE","totalCloses","totalSolRedeemed","findEmptyTokenAccounts","owner","getTokenAccountsByOwner","programId","splToken","response","emptyAccounts","openLamports","value","pubkey","isEmpty","offsetInBytes","readBigUInt64LE","amount","i","push","lamports","publicKeys","size","length","sweb3","createCloseEmptyAccountsTransactions","accountPKs","cntAccount","program","closeInstructions","map","accPK","createCloseAccountInstruction","transactions","transaction","nextInstr","pop","add","cntInstruction","instruction","count","accounts","feecntrAccount","instructionSysvarAccount","anchor","SYSVAR_INSTRUCTIONS_PUBKEY","Header","totalRedemptions","Grid","container","direction","justifyContent","wrap","Typography","variant","color","style","fontWeight","getPriceString","price","toFixed","CTAButton","styled","Button","RedeemButton","onClick","useState","clicked","setClicked","disabled","CircularProgress","ConnectButton","WalletDialogButton","MainContainer","div","Redeemer","props","setBalance","setEmptyAccounts","setTotalRedemptions","open","message","severity","undefined","alertState","setAlertState","wallet","useWallet","anchorWallet","publicKey","signAllTransactions","signTransaction","provider","preflightCommitment","idl","require","frcntrProgramId","loadEmptyAccounts","updatedEA","frcntrAccount","totalInfo","useEffect","getBalance","balance","LAMPORTS_PER_SOL","onRedeem","ta","sendTransaction","txid","confirmTransaction","res","err","toString","msg","trace","Container","marginTop","maxWidth","position","Paper","padding","backgroundColor","borderRadius","connected","Snackbar","autoHideDuration","onClose","Alert","theme","createTheme","palette","type","network","process","rpcHost","frcntProgramID","PublicKey","frcntAccount","Connection","App","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a7ebe64.chunk.js","sourcesContent":["\r\n//import sweb3 = require('@solana/web3.js');\r\nimport * as sweb3 from '@solana/web3.js';\r\nimport * as anchor from \"@project-serum/anchor\";\r\n//import base58 = require('bs58');\r\n//import base58 from 'bs58';\r\n//import splToken = require('@solana/spl-token');\r\nimport * as splToken from '@solana/spl-token'\r\n\r\nexport const RENT_PER_TOKEN_ACCOUNT_IN_SOL = 0.00203928;\r\nexport const MAX_CLOSE_INSTRUCTIONS = 16;\r\n\r\n\r\nexport interface EmptyAccounts {\r\n    publicKeys: sweb3.PublicKey[];\r\n    size: number;\r\n    amount: number;\r\n}\r\n\r\nexport interface TotalRedemptions {\r\n    totalCloses: number;\r\n    totalSolRedeemed: number;\r\n}\r\n\r\n\r\nexport async function getTotalRedemptions(connection: sweb3.Connection, account: sweb3.PublicKey) : Promise<TotalRedemptions|null> {\r\n    const buffer = await connection.getAccountInfo(account);\r\n    if(!buffer || !buffer.data){\r\n        console.log(\"Could net get account info for \"+account.toBase58());\r\n        return null;\r\n    }\r\n    const closedAccounts = buffer.data.readInt32LE(8)\r\n    return {\r\n        totalCloses: closedAccounts,\r\n        totalSolRedeemed: RENT_PER_TOKEN_ACCOUNT_IN_SOL * closedAccounts\r\n    }\r\n}\r\n\r\n\r\nexport async function findEmptyTokenAccounts(connection: sweb3.Connection, owner: sweb3.PublicKey) : Promise<EmptyAccounts> {\r\n    const response = await connection.getTokenAccountsByOwner(owner,{programId: splToken.TOKEN_PROGRAM_ID});\r\n    console.log(response);\r\n    const emptyAccounts: sweb3.PublicKey[] = [];\r\n    let openLamports = 0;\r\n    for (let account of response.value){\r\n        console.log(account.pubkey.toBase58());\r\n        let isEmpty = false;\r\n        const offsetInBytes = 8*8;\r\n        if(account.account.data.readBigUInt64LE){\r\n            const amount = account.account.data.readBigUInt64LE(offsetInBytes);\r\n            console.log(\"amount: \"+amount);\r\n            isEmpty = amount === 0n;\r\n        } else {\r\n            // readBigUInt64LE not available in older versions\r\n            isEmpty = true;\r\n            for (let i = 0; i<8; i++){\r\n                if(account.account.data[offsetInBytes+i]!==0){\r\n                    isEmpty = false;\r\n                    break;\r\n                }\r\n            }\r\n            console.log(\"account empty: \"+isEmpty);\r\n        }\r\n        if(isEmpty){\r\n            console.log(\"account empty!\");\r\n            emptyAccounts.push(account.pubkey);\r\n            openLamports += account.account.lamports;\r\n        }\r\n    }\r\n    return {\r\n        publicKeys: emptyAccounts,\r\n        size: emptyAccounts.length,\r\n        amount: openLamports / sweb3.LAMPORTS_PER_SOL\r\n    };\r\n\r\n}\r\n\r\nexport async function createCloseEmptyAccountsTransactions(owner: sweb3.PublicKey, accountPKs: sweb3.PublicKey[], cntAccount?: sweb3.PublicKey, program?: anchor.Program): Promise<sweb3.Transaction[]> {\r\n\r\n    const closeInstructions = accountPKs.map(accPK => splToken.Token.createCloseAccountInstruction(\r\n        splToken.TOKEN_PROGRAM_ID,\r\n        accPK,\r\n        owner,\r\n        owner,\r\n        []\r\n    ));\r\n\r\n    let transactions: sweb3.Transaction[] = [];\r\n    \r\n    while(closeInstructions.length>0){\r\n        const transaction = new sweb3.Transaction();\r\n        for (let i = 0; i < MAX_CLOSE_INSTRUCTIONS; i++) {\r\n            const nextInstr = closeInstructions.pop();\r\n            if(nextInstr){\r\n                transaction.add(nextInstr);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if(cntAccount && program){\r\n            console.log(\"Program is here! \"+program);\r\n            const cntInstruction = program.instruction.count(\r\n                {\r\n                accounts:\r\n                {\r\n                  feecntrAccount: cntAccount,\r\n                  instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n        \r\n                }\r\n              });\r\n              console.log(\"instruction created! \");\r\n            transaction.add(cntInstruction);\r\n        }\r\n\r\n        transactions.push(transaction);\r\n    }\r\n    return transactions;\r\n}\r\n","\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { EmptyAccounts, TotalRedemptions } from './fee-redeemer';\r\n\r\ntype HeaderProps = {\r\n  emptyAccounts?: EmptyAccounts;\r\n  totalRedemptions?: TotalRedemptions;\r\n};\r\n\r\nexport const Header = ({ emptyAccounts, totalRedemptions }: HeaderProps) => {\r\n  return (\r\n    <Grid container direction=\"row\" justifyContent=\"center\" wrap=\"nowrap\">\r\n      <Grid container direction=\"row\" wrap=\"nowrap\">\r\n        {emptyAccounts && (\r\n          <Grid container direction=\"row\" wrap=\"nowrap\">\r\n            <Grid container direction=\"column\">\r\n              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                Empty Accounts\r\n              </Typography>\r\n              <Typography\r\n                variant=\"h6\"\r\n                color=\"textPrimary\"\r\n                style={{\r\n                  fontWeight: 'bold',\r\n                }}\r\n              >\r\n                {`${emptyAccounts?.size}`}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid container direction=\"column\">\r\n              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                You can redeem\r\n              </Typography>\r\n              <Typography\r\n                variant=\"h6\"\r\n                color=\"textPrimary\"\r\n                style={{ fontWeight: 'bold' }}\r\n              >\r\n                {getPriceString(emptyAccounts?.amount)}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid container direction=\"column\">\r\n              <Typography variant=\"body2\" color=\"textSecondary\">\r\n                Total Redemmed\r\n              </Typography>\r\n              <Typography\r\n                variant=\"h6\"\r\n                color=\"textPrimary\"\r\n                style={{\r\n                  fontWeight: 'bold',\r\n                }}\r\n              >\r\n                {totalRedemptions && getPriceString(totalRedemptions?.totalSolRedeemed)}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n        \r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst getPriceString = (price: number): string => {\r\n  return `◎ ${price.toFixed(3)}`;\r\n};\r\n","import styled from 'styled-components';\r\nimport Button from '@material-ui/core/Button';\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport { useState } from 'react';\r\nimport { EmptyAccounts } from './fee-redeemer';\r\n\r\nexport const CTAButton = styled(Button)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`; // add your own styles here\r\n\r\nexport const RedeemButton = ({\r\n  onClick,\r\n  emptyAccounts\r\n}: {\r\n  onClick: () => Promise<void>;\r\n  emptyAccounts?: EmptyAccounts;\r\n}) => {\r\n  const [clicked, setClicked] = useState(false);\r\n\r\n\r\n  const getRedeemButtonContent = () => {\r\n    if (clicked) {\r\n      return <CircularProgress />;\r\n    } else if (emptyAccounts?.size===0) {\r\n      return 'NO EMPTY ACCOUNTS';\r\n    }\r\n\r\n    return 'REDEEM';\r\n  };\r\n\r\n  return (\r\n    <CTAButton\r\n      disabled={\r\n        clicked ||\r\n        emptyAccounts?.size===0\r\n      }\r\n      onClick={async () => {\r\n        setClicked(true);\r\n        await onClick();\r\n        setClicked(false);\r\n      }}\r\n      variant=\"contained\"\r\n    >\r\n      {getRedeemButtonContent()}\r\n    </CTAButton>\r\n  );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { Container, Paper, Snackbar } from \"@material-ui/core\";\r\nimport styled from 'styled-components';\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\nimport * as anchor from \"@project-serum/anchor\";\r\n\r\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\r\n\r\nimport { useAnchorWallet, useWallet } from \"@solana/wallet-adapter-react\";\r\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\r\n\r\nimport {EmptyAccounts, TotalRedemptions, findEmptyTokenAccounts, createCloseEmptyAccountsTransactions, getTotalRedemptions} from \"./fee-redeemer\";\r\nimport { Header } from \"./Header\";\r\nimport { RedeemButton } from \"./RedeemButton\";\r\n\r\n//import idl from \"./frcnt_IDL.json\"; \r\nimport { Frcnt } from \"./frcnt_Types\";\r\n\r\nexport interface RedeemerProps {\r\n  connection: anchor.web3.Connection;\r\n  rpcHost: string;\r\n  frcntrProgramId: anchor.web3.PublicKey;\r\n  frcntrAccount: anchor.web3.PublicKey;\r\n}\r\n\r\nconst ConnectButton = styled(WalletDialogButton)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst MainContainer = styled.div``; // add your owns styles here\r\n\r\nconst Redeemer = (props: RedeemerProps) => {\r\n  const connection = props.connection;\r\n  const [balance, setBalance] = useState<number>();\r\n  const [emptyAccounts, setEmptyAccounts] = useState<EmptyAccounts>();\r\n  const [totalRedemptions, setTotalRedemptions] = useState<TotalRedemptions>();\r\n  //const [isInTransaction, setIsInTransaction] = useState(false); \r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: \"\",\r\n    severity: undefined,\r\n  });\r\n\r\n  //const w2 = useWallet();\r\n  //const rpcUrl = props.rpcHost;\r\n  const wallet = useWallet();\r\n\r\n  const anchorWallet = {\r\n    publicKey: wallet.publicKey,\r\n    signAllTransactions: wallet.signAllTransactions,\r\n    signTransaction: wallet.signTransaction,\r\n  } as anchor.Wallet;\r\n\r\n  const provider = new anchor.Provider(connection, anchorWallet, {\r\n    preflightCommitment: 'recent',\r\n  });\r\n  \r\n  const idl = require(\"./frcnt_IDL.json\");\r\n  const program = new anchor.Program(idl, props.frcntrProgramId, provider);\r\n\r\n\r\n\r\n  const loadEmptyAccounts = () => {\r\n    (async () => {\r\n      if (!wallet || !wallet.publicKey) return;\r\n      //console.log(\"Finding empty token accounts\");\r\n      const updatedEA = await findEmptyTokenAccounts(connection,wallet.publicKey);\r\n      //console.log(\"Found  \"+updatedEA.size);\r\n      \r\n      const totalInfo = await getTotalRedemptions(connection,props.frcntrAccount);\r\n\r\n      setEmptyAccounts(updatedEA);\r\n      if(totalInfo){\r\n        setTotalRedemptions(totalInfo);\r\n      }\r\n    })();\r\n  };\r\n\r\n  useEffect(loadEmptyAccounts, [\r\n    wallet,\r\n    connection,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (wallet && wallet.publicKey) {\r\n        const balance = await connection.getBalance(wallet.publicKey);\r\n        setBalance(balance / LAMPORTS_PER_SOL);\r\n      }\r\n    })();\r\n  }, [wallet, connection]);\r\n\r\n  const onRedeem = async () => {\r\n    try {\r\n      //setIsInTransaction(true);\r\n      if (wallet && wallet.publicKey && emptyAccounts && emptyAccounts.size>0) {\r\n\r\n\r\n\r\n        const transactions = await createCloseEmptyAccountsTransactions(wallet.publicKey, emptyAccounts.publicKeys, props.frcntrAccount, program);\r\n        for (const ta of transactions){\r\n          const txid = await wallet.sendTransaction(ta,connection);\r\n          console.log(txid);\r\n          console.log(\"Redeem sent\");\r\n\r\n          const res = await connection.confirmTransaction(txid, 'confirmed');\r\n          if(!res.value.err){\r\n            setAlertState({\r\n              open: true,\r\n              message: \"Successfully redeemed some SOL!\",\r\n              severity: \"success\",\r\n            });\r\n          } else {\r\n            setAlertState({\r\n              open: true,\r\n              message: res.value.err.toString(),\r\n              severity: \"warning\",\r\n            });\r\n          }\r\n        }\r\n\r\n      }\r\n    } catch (error: any) {\r\n      let message = error.msg || \"Redeem failed!\";\r\n      console.trace();\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: \"error\",\r\n      });\r\n    } finally {\r\n      if (wallet && wallet.publicKey) {\r\n        const balance = await props.connection.getBalance(wallet.publicKey);\r\n        setBalance(balance / LAMPORTS_PER_SOL);\r\n      }\r\n      //setIsInTransaction(false);\r\n      loadEmptyAccounts();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container style={{ marginTop: 100 }}>\r\n      <Container maxWidth=\"xs\" style={{ position: 'relative' }}>\r\n        <Paper\r\n          style={{ padding: 24, backgroundColor: '#151A1F', borderRadius: 6 }}\r\n        >\r\n          <h1>Solana Fee Redeemer</h1>\r\n          {!wallet.connected ? (\r\n            <ConnectButton>Connect Wallet</ConnectButton>\r\n          ) : (\r\n            <>\r\n              <Header emptyAccounts={emptyAccounts} totalRedemptions={totalRedemptions} />\r\n              <MainContainer>\r\n                  <RedeemButton\r\n                    emptyAccounts={emptyAccounts}\r\n                    onClick={onRedeem}\r\n                  />\r\n              </MainContainer>\r\n            </>\r\n          )}\r\n          <p style={{ color: \"gray\"}}>developed and maintained by solandy.sol</p>\r\n        </Paper>\r\n      </Container>\r\n\r\n      <Snackbar\r\n        open={alertState.open}\r\n        autoHideDuration={6000}\r\n        onClose={() => setAlertState({ ...alertState, open: false })}\r\n      >\r\n        <Alert\r\n          onClose={() => setAlertState({ ...alertState, open: false })}\r\n          severity={alertState.severity}\r\n        >\r\n          {alertState.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\n\r\ninterface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\r\n}\r\n\r\nexport default Redeemer;\r\n","import './App.css';\r\nimport { useMemo } from 'react';\r\nimport * as anchor from '@project-serum/anchor';\r\n\r\nimport { clusterApiUrl } from '@solana/web3.js';\r\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\r\nimport {\r\n  getPhantomWallet,\r\n  getSlopeWallet,\r\n  getSolflareWallet,\r\n  getSolletWallet,\r\n  getSolletExtensionWallet,\r\n} from '@solana/wallet-adapter-wallets';\r\n\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n} from '@solana/wallet-adapter-react';\r\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\r\n\r\nimport { ThemeProvider, createTheme } from '@material-ui/core';\r\nimport Redeemer from './Redeemer';\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    type: 'dark',\r\n  },\r\n});\r\n\r\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\r\n  try {\r\n    const counterProgramId = new anchor.web3.PublicKey(\r\n      process.env.REACT_APP_COUNTER_PROGRAM_ID!,\r\n    );\r\n\r\n    return counterProgramId;\r\n  } catch (e) {\r\n    console.log('Failed to construct CandyMachineId', e);\r\n    return undefined;\r\n  }\r\n};\r\n\r\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\r\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\r\nconst frcntProgramID = new anchor.web3.PublicKey(process.env.REACT_APP_COUNTER_PROGRAM_ID!);\r\nconst frcntAccount = new anchor.web3.PublicKey(process.env.REACT_APP_COUNTER_PROGRAM_ACCOUNT!);\r\nconst connection = new anchor.web3.Connection(rpcHost\r\n  ? rpcHost\r\n  : anchor.web3.clusterApiUrl('mainnet-beta'));\r\n\r\n\r\nconst App = () => {\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n  const wallets = useMemo(\r\n    () => [\r\n      getPhantomWallet(),\r\n      getSolflareWallet(),\r\n      getSlopeWallet(),\r\n      getSolletWallet({ network }),\r\n      getSolletExtensionWallet({ network }),\r\n    ],\r\n    [],\r\n  );\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <ConnectionProvider endpoint={endpoint}>\r\n        <WalletProvider wallets={wallets} autoConnect>\r\n          <WalletDialogProvider>\r\n            <Redeemer\r\n              connection={connection}\r\n              rpcHost={rpcHost}\r\n              frcntrProgramId={frcntProgramID}\r\n              frcntrAccount={frcntAccount}\r\n            />\r\n          </WalletDialogProvider>\r\n        </WalletProvider>\r\n      </ConnectionProvider>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}