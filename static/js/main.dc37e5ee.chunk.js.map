{"version":3,"sources":["fee-redeemer.ts","Redeemer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["findEmptyTokenAccounts","connection","owner","a","getTokenAccountsByOwner","programId","splToken","response","console","log","emptyAccounts","openLamports","value","account","pubkey","toBase58","isEmpty","offsetInBytes","data","readBigUInt64LE","amount","i","push","lamports","publicKeys","size","length","sweb3","createCloseEmptyAccountsTransactions","accountPKs","closeInstructions","map","accPK","createCloseAccountInstruction","transactions","transaction","nextInstr","pop","add","Redeemer","props","useState","balance","setBalance","setEmptyAccounts","open","message","severity","undefined","alertState","setAlertState","w2","useWallet","wallet","useAnchorWallet","loadEmptyAccounts","publicKey","updatedEA","useEffect","getBalance","LAMPORTS_PER_SOL","onRedeem","ta","sendTransaction","txid","confirmTransaction","res","err","toString","msg","style","display","flexDirection","justifyContent","alignItems","height","disabled","onClick","toLocaleString","Snackbar","autoHideDuration","onClose","Alert","rpcHost","anchor","Connection","App","endpoint","React","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletWallet","network","getSolletExtensionWallet","autoConnect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dc37e5ee.chunk.js","sourcesContent":["\r\n//import sweb3 = require('@solana/web3.js');\r\nimport * as sweb3 from '@solana/web3.js';\r\n//import base58 = require('bs58');\r\n//import base58 from 'bs58';\r\n//import splToken = require('@solana/spl-token');\r\nimport * as splToken from '@solana/spl-token'\r\n\r\n\r\nexport const MAX_CLOSE_INSTRUCTIONS = 20;\r\n\r\n\r\nexport interface EmptyAccounts {\r\n    publicKeys: sweb3.PublicKey[];\r\n    size: number;\r\n    amount: number;\r\n}\r\n\r\nexport async function findEmptyTokenAccounts(connection: sweb3.Connection, owner: sweb3.PublicKey) : Promise<EmptyAccounts> {\r\n    const response = await connection.getTokenAccountsByOwner(owner,{programId: splToken.TOKEN_PROGRAM_ID});\r\n    console.log(response);\r\n    const emptyAccounts: sweb3.PublicKey[] = [];\r\n    let openLamports = 0;\r\n    for (let account of response.value){\r\n        console.log(account.pubkey.toBase58());\r\n        let isEmpty = false;\r\n        const offsetInBytes = 8*8;\r\n        if(account.account.data.readBigUInt64LE){\r\n            const amount = account.account.data.readBigUInt64LE(offsetInBytes);\r\n            console.log(\"amount: \"+amount);\r\n            isEmpty = amount === 0n;\r\n        } else {\r\n            // readBigUInt64LE not available in older versions\r\n            isEmpty = true;\r\n            for (let i = 0; i<8; i++){\r\n                if(account.account.data[offsetInBytes+i]!==0){\r\n                    isEmpty = false;\r\n                    break;\r\n                }\r\n            }\r\n            console.log(\"account empty: \"+isEmpty);\r\n        }\r\n        if(isEmpty){\r\n            console.log(\"account empty!\");\r\n            emptyAccounts.push(account.pubkey);\r\n            openLamports += account.account.lamports;\r\n        }\r\n    }\r\n    return {\r\n        publicKeys: emptyAccounts,\r\n        size: emptyAccounts.length,\r\n        amount: openLamports / sweb3.LAMPORTS_PER_SOL\r\n    };\r\n\r\n}\r\n\r\nexport async function createCloseEmptyAccountsTransactions(owner: sweb3.PublicKey, accountPKs: sweb3.PublicKey[]): Promise<sweb3.Transaction[]> {\r\n\r\n    const closeInstructions = accountPKs.map(accPK => splToken.Token.createCloseAccountInstruction(\r\n        splToken.TOKEN_PROGRAM_ID,\r\n        accPK,\r\n        owner,\r\n        owner,\r\n        []\r\n    ));\r\n\r\n    let transactions: sweb3.Transaction[] = [];\r\n    \r\n    while(closeInstructions.length>0){\r\n        const transaction = new sweb3.Transaction();\r\n        for (let i = 0; i < MAX_CLOSE_INSTRUCTIONS; i++) {\r\n            const nextInstr = closeInstructions.pop();\r\n            if(nextInstr){\r\n                transaction.add(nextInstr);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        transactions.push(transaction);\r\n    }\r\n    return transactions;\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { Snackbar } from \"@material-ui/core\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\n\r\nimport * as anchor from \"@project-serum/anchor\";\r\n\r\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\r\n\r\nimport { useWallet, useAnchorWallet } from \"@solana/wallet-adapter-react\";\r\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\r\n\r\nimport {EmptyAccounts, findEmptyTokenAccounts, createCloseEmptyAccountsTransactions} from \"./fee-redeemer\";\r\n\r\nexport interface RedeemerProps {\r\n  connection: anchor.web3.Connection;\r\n}\r\n\r\nconst Redeemer = (props: RedeemerProps) => {\r\n  const connection = props.connection;\r\n  const [balance, setBalance] = useState<number>();\r\n  const [emptyAccounts, setEmptyAccounts] = useState<EmptyAccounts>();\r\n  //const [isInTransaction, setIsInTransaction] = useState(false); \r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: \"\",\r\n    severity: undefined,\r\n  });\r\n\r\n  const w2 = useWallet();\r\n  const wallet = useAnchorWallet();\r\n\r\n  const loadEmptyAccounts = () => {\r\n    (async () => {\r\n      if (!wallet) return;\r\n      console.log(\"Finding empty token accounts\");\r\n      const updatedEA = await findEmptyTokenAccounts(connection,wallet.publicKey);\r\n      console.log(\"Found  \"+updatedEA.size);\r\n\r\n      setEmptyAccounts(updatedEA);\r\n    })();\r\n  };\r\n\r\n  useEffect(loadEmptyAccounts, [\r\n    wallet,\r\n    connection,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (wallet) {\r\n        const balance = await connection.getBalance(wallet.publicKey);\r\n        setBalance(balance / LAMPORTS_PER_SOL);\r\n      }\r\n    })();\r\n  }, [wallet, connection]);\r\n\r\n  const onRedeem = async () => {\r\n    try {\r\n      //setIsInTransaction(true);\r\n      if (wallet && emptyAccounts && emptyAccounts.size>0) {\r\n        const transactions = await createCloseEmptyAccountsTransactions(wallet.publicKey, emptyAccounts.publicKeys);\r\n        for (const ta of transactions){\r\n          const txid = await w2.sendTransaction(ta,connection);\r\n          console.log(txid);\r\n          console.log(\"Redeem sent\");\r\n\r\n          const res = await connection.confirmTransaction(txid, 'confirmed');\r\n          if(!res.value.err){\r\n            setAlertState({\r\n              open: true,\r\n              message: \"Successfully redeemed some SOL!\",\r\n              severity: \"success\",\r\n            });\r\n          } else {\r\n            setAlertState({\r\n              open: true,\r\n              message: res.value.err.toString(),\r\n              severity: \"warning\",\r\n            });\r\n          }\r\n        }\r\n\r\n      }\r\n    } catch (error: any) {\r\n      let message = error.msg || \"Redeem failed!\";\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: \"error\",\r\n      });\r\n    } finally {\r\n      if (wallet) {\r\n        const balance = await props.connection.getBalance(wallet.publicKey);\r\n        setBalance(balance / LAMPORTS_PER_SOL);\r\n      }\r\n      //setIsInTransaction(false);\r\n      loadEmptyAccounts();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <main>\r\n       <div style={{display: 'flex', flexDirection: 'column', justifyContent:'center', alignItems:'center', height: '100vh'}}>\r\n      <h1>Fee Redeemer</h1>\r\n      <div>\r\n      {!wallet ? (\r\n          <WalletDialogButton>Connect Wallet</WalletDialogButton>\r\n        ) : (\r\n          <div>\r\n            {emptyAccounts && <p>You have {emptyAccounts?.size} empty token accounts and could redeem {emptyAccounts?.amount} SOL!</p>}\r\n          <button\r\n            disabled={!wallet}\r\n            onClick={onRedeem}\r\n          >Redeem</button>\r\n          \r\n          {wallet && <p>Your Balance: {(balance || 0).toLocaleString()} SOL</p>}\r\n          </div>\r\n        )}\r\n        </div>\r\n\r\n      <Snackbar\r\n        open={alertState.open}\r\n        autoHideDuration={6000}\r\n        onClose={() => setAlertState({ ...alertState, open: false })}\r\n      >\r\n        <Alert\r\n          onClose={() => setAlertState({ ...alertState, open: false })}\r\n          severity={alertState.severity}\r\n        >\r\n          {alertState.message}\r\n        </Alert>\r\n      </Snackbar>\r\n      \r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\ninterface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\r\n}\r\n\r\nexport default Redeemer;\r\n","\nimport * as React from \"react\";\nimport './App.css';\n\n\nimport Redeemer from \"./Redeemer\";\n\nimport * as anchor from \"@project-serum/anchor\";\nimport * as sweb3 from '@solana/web3.js';\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolletExtensionWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider\n} from \"@solana/wallet-adapter-react\";\n\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\n\nconst USE_MAINNET = true;\n\nconst rpcHost = sweb3.clusterApiUrl(USE_MAINNET?'mainnet-beta':'devnet');\nconst connection = new anchor.web3.Connection(rpcHost);\n\nfunction App() {\n  \n  const endpoint = React.useMemo(() => rpcHost, []);\n\n  const wallets = React.useMemo(\n    () => [\n        getPhantomWallet(),\n        getSlopeWallet(),\n        getSolflareWallet(),\n        getSolletWallet({ network: rpcHost as WalletAdapterNetwork }),\n        getSolletExtensionWallet({ network: rpcHost as WalletAdapterNetwork })\n    ],\n    []\n  );\n  \n\n  return (\n    <ConnectionProvider endpoint={endpoint}>\n      <WalletProvider wallets={wallets} autoConnect={true}>\n        <WalletDialogProvider>\n          <Redeemer\n                connection={connection}\n              />\n        </WalletDialogProvider>\n      </WalletProvider>\n    </ConnectionProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}